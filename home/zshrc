#
#
#         _____
#       .'/L|__`.
#      / =[_]O|` \
#      |"+_____":|
#    __:='|____`-:__
#   ||[] ||====| []||
#   ||[] | |=| | []||
#   |:||_|=|U| |_||:|
#   |:|||]_=_ =[_||:|
#   | |||] [_][]C|| |
#   | ||-'"""""`-|| |
#   /|\\_\_|_|_/_//|\
#  |___|   /|\   |___|   csexton's zsh config
#  `---'  |___|  `---'       Making the Kessel Run in less than twelve parsecs.
#         `---'
#
# RVM {{{
if [[ -s ~/.rvm/scripts/rvm ]] ; then source ~/.rvm/scripts/rvm ; fi
# }}}
# Colors {{{
autoload -U colors
colors
setopt prompt_subst
# }}}
# Auto Correct {{{
setopt correct_all
# }}}
# Key Bindings {{{
# This might need to be moved into a mac-specific file in oh-my-zsh
#stty erase ^H &>/dev/null
bindkey "^?" backward-delete-char
bindkey "^[[3~" delete-char
bindkey -e

bindkey '\ew' kill-region
bindkey -s '\el' "ls\n"
bindkey -s '\e.' "..\n"
bindkey '^r' history-incremental-search-backward
bindkey "^[[5~" up-line-or-history
bindkey "^[[6~" down-line-or-history

# make search up and down work, so partially type and hit up/down to find relevant stuff
bindkey '^[[A' up-line-or-search
bindkey '^[[B' down-line-or-search
bindkey "^p" up-line-or-search
bindkey "^n" down-line-or-search

bindkey "^[[H" beginning-of-line
bindkey "^[[1~" beginning-of-line
bindkey "^[OH" beginning-of-line
bindkey "^[[F"  end-of-line
bindkey "^[[4~" end-of-line
bindkey "^[OF" end-of-line
bindkey ' ' magic-space    # also do history expansion on space

bindkey "^[[1;5C" forward-word
bindkey "^[[1;5D" backward-word

bindkey '^[[Z' reverse-menu-complete

# Make the delete key (or Fn + Delete on the Mac) work instead of outputting a ~
bindkey '^?' backward-delete-char
bindkey "^[[3~" delete-char
bindkey "^[3;5~" delete-char
bindkey "\e[3~" delete-char

# usage: bindtc <cap> <fallback> <zsh-command>
bindtc ()
{
  local keyval=$(echotc "$1" 2>&-)
  bindkey "${keyval:-$2}" "$3"
}
# Let backtab cycle through completions in reverse
bindtc bt "^[[Z" reverse-menu-complete

# Bindings for PGUP, PGDN, HOME, END
bindtc kP "^[[I" history-beginning-search-backward
bindtc kN "^[[G" history-beginning-search-forward
bindtc kh "^[[H" beginning-of-line
bindtc kH "^[[F" end-of-line

# Bindings for UP, DOWN, LEFT, RIGHT
bindtc ku "^[[A" up-line-or-history
bindtc kd "^[[B" down-line-or-history
bindtc kr "^[[C" forward-char
bindtc kl "^[[D" backward-char

# Emacs style for vi mode
#set -o vi
#bindkey -v # vi mode line editting
#bindkey '^A' beginning-of-line
#bindkey '^E' end-of-line
#bindkey '^K' kill-line
#bindkey '^U' kill-whole-line
#bindkey -M viins '^O' copy-prev-shell-word
#bindkey '^L' push-line # push current command into a buffer, allows you to do another command then returns to previous command
# }}}
# Completion {{{
# Show completion on first TAB
zmodload zsh/complist
autoload -U compinit && compinit

unsetopt menucomplete   # do not autoselect the first completion entry
unsetopt flowcontrol
setopt auto_menu         # show completion menu on succesive tab press
setopt complete_in_word
setopt always_to_end

#zstyle -e ':completion:*:approximate:*' max-errors 'reply=( $(( ($#PREFIX + $#SUFFIX) / 3 )) )'
#zstyle ':completion:*:descriptions' format "- %d -"
#zstyle ':completion:*:corrections' format "- %d - (errors %e})"
#zstyle ':completion:*:default' list-prompt '%S%M matches%s'
#zstyle ':completion:*' group-name ''
#zstyle ':completion:*:manuals' separate-sections true
#zstyle ':completion:*:manuals.(^1*)' insert-sections true
zstyle ':completion:*' menu select
#zstyle ':completion:*' verbose yes

# Case insensitive and substring matching
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
# }}}
# History {{{
## Command history configuration
HISTFILE=$HOME/.zsh_history
HISTSIZE=10000
SAVEHIST=10000

setopt append_history
setopt extended_history
setopt hist_expire_dups_first
setopt hist_fcntl_lock
setopt hist_ignore_all_dups
setopt hist_ignore_dups
setopt hist_ignore_space
setopt hist_no_store
setopt hist_verify
setopt inc_append_history
setopt share_history



# }}}
# Git {{{
ZSH_THEME_GIT_PROMPT_PREFIX="%{$reset_color%}%{$fg[red]%}‹"
ZSH_THEME_GIT_PROMPT_SUFFIX="%{$fg[red]%}›%{$reset_color%}"
ZSH_THEME_GIT_PROMPT_DIRTY="%{$reset_color%}%{$fg[yellow]%}∗%{$reset_color%}"
ZSH_THEME_GIT_PROMPT_ADDED="%{$reset_color%}%{$fg[green]%}✓%{$reset_color%}"
ZSH_THEME_GIT_PROMPT_CLEAN=""

# get the name of the branch we are on
function git_prompt_info() {
  ref=$(git symbolic-ref HEAD 2> /dev/null) || return
  echo "$ZSH_THEME_GIT_PROMPT_PREFIX${ref#refs/heads/}$(parse_git_dirty)$ZSH_THEME_GIT_PROMPT_SUFFIX"
}

# Checks if working tree is dirty
parse_git_dirty() {
  if [[ -n $(git status -s --ignore-submodules=dirty 2> /dev/null) ]]; then
    echo "$ZSH_THEME_GIT_PROMPT_DIRTY"
  else
    echo "$ZSH_THEME_GIT_PROMPT_CLEAN"
  fi
}

# }}}
# Aliases and Functions {{{
alias ip="curl -s ip.tpo.pe"
ackr() { ack $* app/* lib/* config/* db/migrate/* test/* }
function prompt-dissapoint {
  export PROMPT="%{$fg[green]%}ಠ_ಠ %{$reset_color%}"
}
function prompt-ahh {
  export PROMPT="%{$fg[green]%}٩◔̯◔۶ %{$reset_color%}"
}
function prompt-roll {
  export PROMPT="%{$fg[green]%}◔_◔ %{$reset_color%}"
}
function prompt-yay {
  export PROMPT="%{$fg[green]%}(｡◕‿◕｡) %{$reset_color%}"
}
function prompt-gasp {
  export PROMPT="%{$fg[green]%}⊙▃ ⊙ %{$reset_color%}"
}
function prompt-happy {
  export PROMPT="%{$fg[green]%}(•‿•) %{$reset_color%}"
}

mvim() { /Applications/MacVim.app/Contents/MacOS/Vim -g $* }
 # }}}
# Terminal Title {{{
function title {
  [ "$DISABLE_AUTO_TITLE" != "true" ] || return
  if [[ "$TERM" == screen* ]]; then
    print -Pn "\ek$1:q\e\\" #set screen hardstatus, usually truncated at 20 chars
  elif [[ "$TERM" == xterm* ]] || [[ $TERM == rxvt* ]] || [[ "$TERM_PROGRAM" == "iTerm.app" ]]; then
    print -Pn "\e]2;$2:q\a" #set window name
    print -Pn "\e]1;$1:q\a" #set icon (=tab) name (will override window name on broken terminal)
  fi
}

#Appears when you have the prompt
function title_precmd {
  title "%15<...<%~%<<" "%n@%m: %~"
}

#Appears at the beginning of (and during) of command execution
function title_preexec {
  emulate -L zsh
  setopt extended_glob
  local CMD=${1[(wr)^(*=*|sudo|ssh|-*)]} #cmd name only, or if this is sudo or ssh, the next cmd
  title "$CMD" "%100>...>$2%<<"
}

autoload -U add-zsh-hook
add-zsh-hook precmd  title_precmd
add-zsh-hook preexec title_preexec
# }}}
# Custom Functions {{{
# Kapow {{{
_rack_root_detect(){
  setopt chaselinks
  local orgdir=$(pwd)
  local basedir=$(pwd)

  while [[ $basedir != '/' ]]; do
    test -e "$basedir/config.ru" && break
    builtin cd ".." 2>/dev/null
    basedir="$(pwd)"
  done

  builtin cd $orgdir 2>/dev/null
  [[ ${basedir} == "/" ]] && return 1
  echo `basename $basedir | sed -E "s/.(com|net|org)//"`
}
kapow(){
  local vhost=$1
  [ ! -n "$vhost" ] && vhost=$(_rack_root_detect)
  if [ ! -h ~/.pow/$vhost ]
  then
    echo "pow: This domain isn’t set up yet. Symlink your application to ${vhost} first."
    return 1
  fi

  [ ! -d ~/.pow/${vhost}/tmp ] &&  mkdir -p ~/.pow/$vhost/tmp
  touch ~/.pow/$vhost/tmp/restart.txt;
  if [ $? -eq 0 ]
  then
    echo "            --_--"
    echo "         (  -_    _)."
    echo "       ( ~       )   )"
    echo "     (( )  (    )  ()  )"
    echo "      (.   )) (       )"
    echo '        ``..     ..``'
    echo "             | |"
    echo "           (=| |=)"
    echo "             | |       Kapow! Restarted $vhost.dev"
    echo '         (../( )\.))'
  fi
}
compctl -W ~/.pow -/ kapow
# View the standard out (puts) from any pow app
alias kaput="tail -f ~/Library/Logs/Pow/apps/*"
# }}}
# Edit command line {{{
autoload -U edit-command-line
zle -N edit-command-line
bindkey '\C-x\C-e' edit-command-line
# }}}
# src Command {{{
src(){cd ~/src/$1;}
compctl -W ~/src -/ src
# }}}
# }}}
# Prompt {{{
PROMPT='%{$fg[green]%}%2~ $(git_prompt_info)%{$reset_color%}%(?:%{$fg[blue]%}:$fg[red])%(!.#.%%) %{$reset_color%}'
RPROMPT='%{$fg[red]%}$(~/.rvm/bin/rvm-prompt 2> /dev/null)%{$reset_color%}%'
# }}}

# Load the profile if it exists
if [[ -s $HOME/.profile ]] ; then source $HOME/.profile ; fi

# vim: set foldenable fdm=marker fmr={{{,}}}:
